html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}[hidden],template{display:none}@font-face{font-family:Roboto;font-weight:400;font-style:normal;src:url(/public/fonts/Roboto-Regular.woff) format("woff"),url(/public/fonts/Roboto-Regular.woff2) format("woff2")}*{-webkit-tap-highlight-color:transparent}*,:after,:before{box-sizing:border-box}html{font-family:Roboto,sans-serif;font-size:100%;color:#121920;background-color:#fafafa}body{font-weight:400;text-rendering:optimizeLegibility}h1{margin-top:0;margin-bottom:0;font-size:30px;font-weight:500;line-height:130%;color:#121920}h1:not([class]){margin-bottom:.625rem}@media ((min-width:768px)){h1{font-size:36px}}h2{margin-top:0;margin-bottom:0;font-size:30px;font-weight:500;line-height:130%;color:#121920}h2:not([class]){margin-bottom:.625rem}@media ((min-width:768px)){h2{font-size:30px;line-height:120%}}h3{margin-top:0;margin-bottom:0;font-size:20px;font-weight:500;line-height:120%;color:#3c3c3c}h3:not([class]){margin-bottom:.625rem}@media ((min-width:768px)){h3{font-size:24px;line-height:130%}}p{margin-top:0;margin-bottom:0;font-size:14px;font-weight:400;line-height:167%}p:not([class]){margin-bottom:.625rem}@media ((min-width:768px)){p{font-size:16px;line-height:167%}}ol{list-style:none;counter-reset:li;font-size:14px}ol:not([class]){padding-inline-start:20px}ol:first-child{margin-top:10px}ol li{line-height:1rem;counter-increment:li;margin-bottom:.625rem;padding-left:.625rem}ol li:before{content:counters(li,".") ".";margin-right:.625rem;color:#dc2c53;height:100%;width:1em}@media ((min-width:768px)){ol li{line-height:1.1875rem;font-size:16px}}ul{list-style:none;font-size:14px;margin-block-start:0;margin-block-end:0;padding-inline-start:0}ul:not([class]){padding-inline-start:20px}ul:not([class]) li{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-align:center;align-items:center;line-height:1rem;margin-bottom:.625rem}ul:not([class]) li:before{content:"";display:inline-block;width:.3125rem;height:.3125rem;margin-right:.625rem;border-radius:50%;background-color:#dc2c53}@media ((min-width:768px)){ul:not([class]) li{font-size:16px;line-height:1.1875rem}}blockquote{margin:0;padding:1.25rem 1.5625rem;border-radius:5px;border-left:5px solid #dc2c53;background-color:#fafafa;font-size:14px;font-weight:400;line-height:167%}@media ((min-width:768px)){blockquote{font-size:16px}}a:not([class]){text-decoration:none;font-weight:400;line-height:167%;color:#34aadd}a:not([class]):hover{text-decoration:underline}a:not([class]):visited{color:#a7ccdc}img{width:100%}.container{width:100%;max-width:80rem;margin-right:auto;margin-left:auto;padding-right:1.25rem;padding-left:1.25rem}.page{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;min-height:100vh}.page__header{position:fixed;z-index:100;top:0;right:0;left:0;-ms-flex-negative:0;flex-shrink:0}.page__content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-positive:1;flex-grow:1;margin-top:6.5625rem;padding-top:2.5rem;padding-bottom:6.25rem}@media (min-width:768px){.page__content{margin-top:5rem;padding-top:3.125rem}}.page__footer{-ms-flex-negative:0;flex-shrink:0}.items{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}@media (min-width:768px){.items{-ms-flex-direction:row;flex-direction:row;gap:2rem}}.items__sidebar{background-color:green}@media (min-width:768px){.items__sidebar{width:17.875rem}}.items__main{background-color:#ff0}@media (min-width:768px){.items__main{-ms-flex:auto;flex:auto}}.icon{display:block;width:100%;height:100%}.heading{margin-top:0;margin-bottom:0;color:#121920}.heading--huge{font-size:30px;font-weight:500;line-height:130%}@media ((min-width:768px)){.heading--huge{font-size:36px}}.heading--large{font-size:30px;font-weight:500;line-height:130%}@media ((min-width:768px)){.heading--large{font-size:30px;line-height:120%}}.heading--medium{font-size:20px;font-weight:500;line-height:120%;color:#3c3c3c}@media ((min-width:768px)){.heading--medium{font-size:24px;line-height:130%}}.logo--small{width:93.42px;height:18.1px}@media (min-width:1440px){.logo--small{width:135.04px;height:30.32px}}
/*# sourceMappingURL=data:application/json;base64, */